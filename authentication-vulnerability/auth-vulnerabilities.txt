Vulnerabilities:
    1. Plain Text Password Storage
Passwords are stored and compared in plain text (user.getPassword().equals(userJson.getPassword())).
This is highly insecure because if the database is compromised, attackers can easily read all passwords.

    2. No password hashing
There is no use of cryptographic hashing (e.g., bcrypt, SHA-256) to securely store passwords.
Hashing ensures that even if the database is compromised, attackers cannot easily reverse-engineer
the passwords.

    3. No Session Management
The KEY is used as a simple authentication mechanism, but there is no proper session management.
    For example:
        There is no expiration time for the KEY.
        There is no way to invalidate the KEY for a specific user.
        The KEY is not tied to a specific user, so anyone with the key can access all users' data.

    4. Lack of Rate Limiting
There is no rate limiting on the login endpoint, making it vulnerable to brute-force attacks.

    5. No Input Validation and Password Policy Enforcement
There is no enforcement of strong password policies (e.g., minimum length, complexity requirements).
There is no validation of the UserJson input (e.g., username and password length, special characters, etc.).

    6. Insecure getAll Endpoint
The getAll endpoint relies solely on the KEY for authorization, which is insecure because:
    The KEY is not tied to a specific user or role.
    There is no granular access control (e.g., only admins should be able to access this endpoint).

    7. Hardcoded Role
The role "USER" is hardcoded during registration. This limits flexibility and could lead to security
issues if roles are not properly managed.

    8. UUID as a Key is Predictable
While UUIDs are generally unique, they are not cryptographically secure.
If an attacker can predict or guess the KEY, they can bypass authentication.

    9. No Protection Against Enumeration Attacks
The login endpoint does not handle failed login attempts securely.
It returns null for invalid credentials, which can be used to enumerate valid usernames.

    10. No Account Lockout Mechanism
There is no mechanism to lock accounts after a certain number of failed login attempts.
